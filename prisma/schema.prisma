// ...existing code...
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  medications       Medication[]
  notifications     Notification[]
  caregivers        Caregiver[]
  adherenceEvents   AdherenceEvent[]
  prescriptions     Prescription[]
  emergencyContacts EmergencyContact[]

  // Added back-relations required by other models
  escalationRules EscalationRule[]
  scanHistories   ScanHistory[]

  @@map("users")
}

model Medication {
  id              String    @id @default(cuid())
  name            String
  genericName     String?
  dosage          String
  frequency       String
  times           String[] // Array of time strings like ["08:00", "20:00"]
  startDate       DateTime
  endDate         DateTime?
  instructions    String?
  color           String    @default("blue")
  reminder        Boolean   @default(true)
  reminderMinutes Int       @default(15)
  isActive        Boolean   @default(true)
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  adherenceEvents AdherenceEvent[]
  notifications   Notification[]
  prescriptions   Prescription[]

  @@map("medications")
}

model Notification {
  id            String    @id @default(cuid())
  type          String // 'medication', 'reminder', 'warning', 'appointment', 'refill'
  title         String
  message       String
  priority      String // 'low', 'medium', 'high', 'urgent'
  channels      String[] // ['push', 'email', 'sms', 'in-app']
  isRead        Boolean   @default(false)
  isActive      Boolean   @default(true)
  scheduledTime DateTime?
  sentAt        DateTime?
  userId        String
  medicationId  String?
  caregiverId   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  medication Medication? @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  caregiver  Caregiver?  @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Caregiver {
  id           String   @id @default(cuid())
  name         String
  relationship String
  email        String?
  phone        String?
  channels     String[] // ['push', 'email', 'sms']
  quietHours   Json? // { start: "22:00", end: "07:00" }
  isActive     Boolean  @default(true)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications   Notification[]
  escalationRules EscalationRule[]

  @@map("caregivers")
}

model EscalationRule {
  id               String   @id @default(cuid())
  condition        String // 'missed', 'urgent', 'warning'
  thresholdMinutes Int?
  isActive         Boolean  @default(true)
  caregiverId      String
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  caregiver Caregiver @relation(fields: [caregiverId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("escalation_rules")
}

model AdherenceEvent {
  id           String   @id @default(cuid())
  date         DateTime
  medicationId String
  plannedDoses Int
  takenDoses   Int
  notes        String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, medicationId, userId])
  @@map("adherence_events")
}

model Prescription {
  id           String    @id @default(cuid())
  medicationId String
  doctorName   String
  doctorPhone  String?
  dosage       String
  instructions String?
  startDate    DateTime
  endDate      DateTime?
  refills      Int       @default(0)
  isActive     Boolean   @default(true)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prescriptions")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  name         String
  phone        String
  relationship String
  priority     Int      @default(1)
  isActive     Boolean  @default(true)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model MedicationInteraction {
  id              String   @id @default(cuid())
  medication1Name String
  medication2Name String
  severity        String // 'minor', 'moderate', 'major', 'contraindicated'
  description     String
  recommendations String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([medication1Name, medication2Name])
  @@map("medication_interactions")
}

model ScanHistory {
  id           String   @id @default(cuid())
  imageUrl     String?
  ocrText      String?
  medicationId String?
  confidence   Float
  status       String // 'success', 'warning', 'error'
  userId       String
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("scan_history")
}

// ...existing code...
